
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import Input
from tensorflow.keras.layers import Dense
import pandas as pd
import numpy as np
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt


(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()


print("Shape of X_train:", X_train.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_test:", y_test.shape)


fig, axs = plt.subplots(2, 5, figsize=(12, 6), facecolor='white')

n = 0
for i in range(2):
    for j in range(5):
        axs[i, j].imshow(X_train[n], cmap='gray')
        axs[i, j].set_title(f"Label: {y_train[n]}")
        axs[i, j].axis('off')
        n += 1

plt.tight_layout()
plt.show()


X_train = X_train.reshape(60000, 784).astype("float32") / 255
X_test = X_test.reshape(10000, 784).astype("float32") / 255


print("New shape of X_train:", X_train.shape)
print("New shape of X_test:", X_test.shape)

model = Sequential(name="DFF-Model")
model.add(Input(shape=(784,), name='Input-Layer'))
model.add(Dense(128, activation='relu', name='Hidden-Layer-1', kernel_initializer='he_normal'))
model.add(Dense(64, activation='relu', name='Hidden-Layer-2', kernel_initializer='he_normal'))
model.add(Dense(32, activation='relu', name='Hidden-Layer-3', kernel_initializer='he_normal'))
model.add(Dense(10, activation='softmax', name='Output-Layer'))


model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])


history = model.fit(X_train, y_train,
                    batch_size=10,
                    epochs=5,
                    verbose=1,
                    validation_split=0.2,
                    shuffle=True)


pred_labels_tr = np.argmax(model.predict(X_train), axis=1)
pred_labels_te = np.argmax(model.predict(X_test), axis=1)

print("\nModel Summary")
model.summary()


print("\n---------- Evaluation on Training Data ----------")
print("Training Accuracy:", accuracy_score(y_train, pred_labels_tr))
print(classification_report(y_train, pred_labels_tr))

print("\n---------- Evaluation on Test Data ----------")
print("Test Accuracy:", accuracy_score(y_test, pred_labels_te))
print(classification_report(y_test, pred_labels_te))
